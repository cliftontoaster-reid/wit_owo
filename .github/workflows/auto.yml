permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main
      - v1.*.x
    paths:
      - src/**
      - tools/**
      - Cargo.toml
      - Cargo.lock
      - .github/workflows/auto.yml
  pull_request:
    branches:
      - main
      - v1.*.x

jobs:
  detect-msrv:
    name: Detect MSRV
    runs-on: ${{ matrix.os }}
    if: github.actor != 'UwUpdate[bot]'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    outputs:
      msrv: ${{ steps.msrv-output.outputs.msrv }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Prepare build cache
        uses: actions/cache@v4
        with:
          path: |
            target
            ${{ runner.os == 'Windows' && '~\\.cargo\\registry' || '~/.cargo/registry' }}
            ${{ runner.os == 'Windows' && '~\\.cargo\\git' || '~/.cargo/git' }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install additional tools
        run: |
          rustup component add clippy
          cargo install cargo-msrv

      - name: Run update
        run: |
          cargo update

      - name: Updating minimum supported Rust version
        id: msrv-detection
        shell: bash
        run: |
          set -o pipefail

          # run find, grab the version after "MSRV:"
          MSRV=$(cargo msrv find --include-all-patch-releases 2>&1 \
                | awk '/MSRV:/ {print $2}' \
                | sed -E 's/\x1B\[[0-9;]*[mK]//g')
          echo "üïµÔ∏è Detected MSRV: $MSRV"
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT

      - name: Output MSRV for collection
        id: msrv-output
        shell: bash
        run: |
          echo "msrv=${{ steps.msrv-detection.outputs.msrv }}" >> $GITHUB_OUTPUT

      - name: Check for breaking changes
        run: cargo clippy --all-targets --all-features -- -D warnings

  validate-msrv:
    name: Validate MSRV
    runs-on: ubuntu-latest
    needs: detect-msrv
    if: github.actor != 'UwUpdate[bot]' && success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install cargo-msrv
        run: cargo install cargo-msrv

      - name: Collect and compare MSRV versions
        id: compare-msrv
        shell: bash
        run: |
          # Extract MSRV values from the matrix jobs
          # Note: GitHub Actions doesn't directly support collecting outputs from matrix jobs
          # We'll re-run MSRV detection to ensure consistency

          echo "üîç Re-detecting MSRV to ensure consistency across all targets..."
          DETECTED_MSRV=$(cargo msrv find --include-all-patch-releases 2>&1 \
                          | awk '/MSRV:/ {print $2}' \
                          | sed -E 's/\x1B\[[0-9;]*[mK]//g')

          echo "üïµÔ∏è Final detected MSRV: $DETECTED_MSRV"
          echo "highest_msrv=$DETECTED_MSRV" >> $GITHUB_OUTPUT

      - name: Set final MSRV
        shell: bash
        run: |
          HIGHEST_MSRV="${{ steps.compare-msrv.outputs.highest_msrv }}"
          echo "üìå Setting MSRV to: $HIGHEST_MSRV"
          cargo msrv set "$HIGHEST_MSRV"

      - name: Verify MSRV is correctly set
        shell: bash
        run: |
          # Verify the MSRV was set correctly by checking Cargo.toml
          if grep -q "rust-version" Cargo.toml; then
            CURRENT_MSRV=$(grep "rust-version" Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
            echo "‚úÖ MSRV set in Cargo.toml: $CURRENT_MSRV"

            # Ensure it matches what we expected
            if [ "$CURRENT_MSRV" = "${{ steps.compare-msrv.outputs.highest_msrv }}" ]; then
              echo "‚úÖ MSRV verification successful"
            else
              echo "‚ùå MSRV mismatch: expected ${{ steps.compare-msrv.outputs.highest_msrv }}, got $CURRENT_MSRV"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No rust-version found in Cargo.toml"
            exit 1
          fi

      - name: Apply update
        run: cargo update

      - name: Commit MSRV changes if needed
        if: github.event_name == 'push'
        shell: bash
        run: |
          git config --local user.email "clifton.toaster.reid@proton.me"
          git config --local user.name "UwUpdate[bot]"

          if git diff --quiet; then
            echo "üìã No MSRV changes to commit"
          else
            git add Cargo.toml Cargo.lock
            git commit -m "chore: update MSRV to ${{ steps.compare-msrv.outputs.highest_msrv }}"
            git push
            echo "‚úÖ MSRV changes committed and pushed"
          fi
